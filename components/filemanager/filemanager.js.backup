var FileManager=function(containerId){
    var fm="components/filemanager/filemanager.php";
    
    var container=$(containerId);
    var rootListContainer=null;
    var listContainer=null;
    var filemanager=this;
    var selectedItem=null;
    
    if (!container) return;
    
    listContainer=$("<ol class='filemanager-root-folder'></ol>");
    rootListContainer=listContainer;
    
    $(function(){
        $.contextMenu({
            selector: '.file-context-menu', 
            callback: function(key, options) {
               processFileContextMenu(key);
            },
            items: {
                "rename": {name: "Rename", icon: "copy"},
                "delete": {name: "Delete", icon: "delete"},
                "sep1": "---------",
                "cut": {name: "Cut", icon: "cut"},
                "copy": {name: "Copy", icon: "copy"},
                "paste": {name: "Paste", icon: "paste"},
                "sep2": "---------",
                "quit": {name: "Quit", icon: function(){
                    return 'context-menu-icon context-menu-icon-quit';
                }}
            }
        });
        
        $.contextMenu({
            selector: '.folder-context-menu', 
            callback: function(key, options) {
                processFileContextMenu(key);
            },
            items: {
                "delete": {name: "Delete", icon: "delete"},
                "rename": {name: "Rename", icon: "copy"},
                "newFile": {name: "New File", icon: "add"},
                "newFolder": {name: "New Folder", icon: "add"},
                "sep1": "---------",
                "cut": {name: "Cut", icon: "cut"},
                "copy": {name: "Copy", icon: "copy"},
                "paste": {name: "Paste", icon: "paste"},
                "sep2": "---------",
                "quit": {name: "Quit", icon: function(){
                    return 'context-menu-icon context-menu-icon-quit';
                }}
            }
        });
    });
    
    container.on('click','span.filemanager-item', function(e){
	    if ($(this)){
            selectedItem=$(this).parent();
	        var data=selectedItem[0].dataset;

            if (selectedItem.hasClass('filemanager-item')){
				
                selectElement($(this));
                
                if (selectedItem.hasClass('filemanager-folder')){
                    var path=data.folder;
					
                    if (data.collapsed==="true"){
                        data.collapsed="false";
                        filemanager.loadFolderTree(path);
                        return false;
                    }else{
                        data.collapsed="true";
                        var id="#group-"+toSafeId(path);
                        $(id).empty();
                    }
                }else{
                    if (filemanager.onFileClick){
                        filemanager.onFileClick(data.folder);
                    }
                }
            }
        }
    });
    
    container.on('contextmenu','span.filemanager-item', function(e){
	    
        if ($(this)){
            selectedItem=$(this).parent();
            if (selectedItem.hasClass('filemanager-item')) {
                selectElement($(this));
            }
        }
        
    });
    
    this.onItemDeleted=function(folder){}

    this.onItemCreated=function(folder){}
    
    this.onItemRenamed=function(source,target){}

    this.readFile=function(path,callback){
        fetch(fm+"?cmd=readFile&path="+path,{credentials: 'include'}).then(function(response) {
            return response.text();
        }).then(function(data){
            if (callback){
                callback(data);
            }
        });
    }
    
    this.saveFile=function(path,text,okCallback,errorCallback){
        $.ajax({
            type: "POST",
            timeout: 50000,
            url: fm+"?cmd=saveFile&path="+path,
            data: {"contents":text},
            success: function (data) {
                if (data==="ok"){
                    if (okCallback){
                        okCallback();
                    }
                }else{
                    if (errorCallback){
                        errorCallback();
                    }
                }
                return false;
            }
        });

    }
    
    this.newFile=function(file,okCallback,errorCallback){
        jQuery.ajax(fm+"?cmd=newFile&path="+file).done(function(data) {
            if (data=="ok"){
                var dname=file.substring(0,file.lastIndexOf('/'));
                var fname=file.substring(file.lastIndexOf('/')+1);
                
                var folderId="#group-"+toSafeId(dname);

                $(folderId).append(buildFileNode(dname,fname));
                
                if (okCallback){
                   if (filemanager.onItemCreated){
                       filemanager.onItemCreated(file);
                   }
                   okCallback();
                }
            }else {
               if (errorCallback){
                   errorCallback(data);
               }
            }
        });
    }
    
    this.deleteFile=function(file,okCallback,errorCallback){
        jQuery.ajax(fm+"?cmd=deleteFile&path="+file).done(function(data) {
            if (data=="ok"){
                if (selectedItem!==null){
                    selectedItem.remove();
                    clearSelection();
                }
                if (okCallback){
                   if (filemanager.onItemDeleted){
                       filemanager.onItemDeleted(file);
                   }
                   okCallback();
                }
            }else {
               if (errorCallback){
                   errorCallback(data);
               }
            }
        });
    }
    
    this.renameFile=function(path,source,target,okCallback,errorCallback){
        jQuery.ajax(fm+"?cmd=renameFile&basePath="+path+"&source="+source+"&target="+target).done(function(data) {
            if (data=="ok"){
                var item=selectedItem.find('span')[0];
                if (item!==null){
                    filemanager.onItemRenamed(path+"/"+source,path+"/"+target);
                    item.text(target);
                }
               if (okCallback){
                   okCallback();
               }
            }else {
               if (errorCallback){
                   errorCallback(data);
               }
            }
	 
        });
    }
    
    this.newDirectory=function(path,folder,okCallback,errorCallback){
        jQuery.ajax(fm+"?cmd=createDir&basePath="+path+"&folder="+folder).done(function(data) {
            if (data=="ok"){
                var directory=path+"/"+folder;
                var id=toSafeId(directory);
                var group=$("#group-"+toSafeId(path));
                
                if (group !== null){

                    group.append(buildFolderNode(path,folder));
                    
                    filemanager.onItemCreated(path+"/"+folder);
                }
                if (okCallback){
                   okCallback();
                }
            }else {
               if (errorCallback){
                   errorCallback(data);
               }
            }
        });
    }
    
    this.deleteDirectory=function(path,okCallback,errorCallback){
        jQuery.ajax(fm+"?cmd=deleteDir&path="+path).done(function(data) {
            if (data=="ok"){
                if (selectedItem!==null){
                    selectedItem.remove();
                    clearSelection();
                }
                if (okCallback){
                    okCallback();
                }
            }else {
                if (errorCallback){
                    errorCallback(data);
                }
            }
        });
    }
    
    this.renameDirectory=function(path,source,target,okCallback,errorCallback){
        jQuery.ajax(fm+"?cmd=renameDir&basePath="+path+"&source="+source+"&target="+target).done(function(data) {
            if (data=="ok"){
                var item=selectedItem.find('span')[0];
                if (item!==null){
                    item.text(target);
                }
                filemanager.onItemRenamed(path+"/"+source,path+"/"+target);
                if (okCallback){
                   okCallback();
               }
            }else {
               if (errorCallback){
                   errorCallback(data);
               }
            }
        });
    }
    
    this.cut=function(type,item){
        alert("function not implemented!");
    }
    
    this.copy=function(type,item){
        alert("function not implemented!");
    }
    
    this.paste=function(type,item){
        alert("function not implemented!");
    }
    
    this.notify={}
    
    function processFileContextMenu(key){
        var item=filemanager.getSelectedItem();
	    var data=item[0].dataset;
        if (item!==null && data!==null && data.folder) {
            if      (key==="rename"){
                var dir=data.folder.substring(0,data.folder.lastIndexOf('/'));
                if (item.hasClass("filemanager-file")){
                    
                    var file=data.folder.substring(data.lastIndexOf('/')+1);
                    
                    showFileOpDialog('Rename File ['+file+']',dir,file, function(target){
                        filemanager.renameFile(dir,file,target, 
                            function(){ filemanager.notify("File renamed",0);},
                            function(error){ filemanager.notify("File rename error, "+error,1);});
                    });
                      
                }
                else if (item.hasClass("filemanager-folder")){
                    var parentDir=dir.substring(0,dir.lastIndexOf('/'));
                    var sourceDir=null;
                    if (parentDir.indexOf('/')>0){
                        sourceDir=dir.substring(dir.lastIndexOf('/')+1);
                    }
                    
                    showFileOpDialog('Rename Directory ['+parentDir+']',sourceDir,"", function(target){
                        filemanager.renameDirectory(parentDir,sourceDir,target, 
                            function(){ filemanager.notify("Folder renamed",0);},
                            function(error){ filemanager.notify("Folder rename error, "+error,1);});
                    });
                }
            }else if(key==="delete"){

                if (item.hasClass("filemanager-file")){
                    
                    showConfirmationDialog("Delete File","File <b>"+data.folder+"</b> is about to be deleted, are you sure?", function(){
                        filemanager.deleteFile(data.folder, 
                            function(){ filemanager.notify("File deleted",0)},
                            function(error){ filemanager.notify("File delete error, "+error,1)});
                    });
                    
                }else if(item.hasClass("filemanager-folder")){
                    
                    showConfirmationDialog("Delete Directory","Directory <b>"+data.folder+"</b> is about to be deleted, are you sure?", function(){
                        filemanager.deleteDirectory(data.folder, 
                            function(){ filemanager.notify("Folder deleted",0);},
                            function(error){ filemanager.notify("Folder delete error, "+error,1)});
                    });
                }
                
            }else if(key==="newFile"){

        	    showFileOpDialog('New File on '+data.folder,data.folder,"", function(target){
                    filemanager.newFile(data.folder+"/"+target,
                        function(){ filemanager.notify("File created",0);},
                        function(error){ filemanager.notify("File creation error, "+error,1);});
                });
                
            }else if(key==="newFolder"){

                showFileOpDialog('New Directory on '+data.folder,data.folder,"", function(target){
                    filemanager.newDirectory(data.folder,target,
                        function(){ filemanager.notify("Directory created",0);} ,
                        function(error){ filemanager.notify("Directory creation error, "+error,1);});
                });
                
            }else if(key==="cut"){
                filemanager.cut(item.dataset.type, data.folder);
            }else if(key==="copy"){
                filemanager.copy(item.dataset.type, data.folder);
            }else if(key==="paste"){
                filemanager.paste(item.dataset.type, data.folder);
            }
        }
    }
    
    this.getSelectedItem=function() {
        return selectedItem;
    }
    
    this.loadFolderTree=function(rootDir,init){
        if (init===true){
            selectedItem=null;
            liItemSelected=null;
            if (rootListContainer!==null){
                rootListContainer.empty();
                container.empty();
                var id=toSafeId(rootDir);
                rootListContainer.append("<li id='root-"+id+"' class='filemanager-root-folder' data-collapsed='false' data-folder='"+rootDir+"'><ol id='group-"+id+"' class='filemanager-folder-list'></ol></li>");
                container.append(rootListContainer);
                listContainer=$("#"+id);


            }
        }

        fetch(fm+"?cmd=getDirTree&path="+rootDir,{credentials: 'include'}).then(function(response) {
            return response.json();
        }).then(function(items){
            var containerId="#group-"+toSafeId(rootDir);
            
            listContainer=$(containerId);
            listContainer.empty();
            $.each(items, function(index, value) {
                if (value.node===0 && value.parent_node===0){

                }else{
					var folder=rootDir+"/"+value.name;
					var id=toSafeId(folder);
					
                    if (value.node_type===0){
                        listContainer.append(buildFolderNode(rootDir,value.name));
                        /*listContainer.append("<li id='folder-"+id+"' class='filemanager-item filemanager-folder' data-collapsed='true' data-folder='"+folder+"'><span class='filemanager-item folder-context-menu'>"+value.name+"</span><ol id='group-"+id+"' class='filemanager-folder-list'></ol></li>");*/
                    }else{
                        listContainer.append(buildFileNode(rootDir,value.name));
                        /*listContainer.append("<li id='file-"+id+"' class='filemanager-item filemanager-file' data-collapsed='true' data-folder='"+folder+"'><span class='filemanager-item file-context-menu'>"+value.name+"</span></li>");*/
                    }
                }
            });
        });
    }
    
    function buildFolderNode(parentFolderPath,newFolderName){
        var folder=parentFolderPath+"/"+newFolderName;
        var id=toSafeId(folder);
        var item="<li id='folder-"+id+"' class='filemanager-item filemanager-folder' data-collapsed='true' data-folder='"+folder+"'><span class='filemanager-item folder-context-menu'>"+newFolderName+"</span><ol id='group-"+id+"' class='filemanager-folder-list'></ol></li>";
        return item;
    }
    
    function buildFileNode(parentFolderPath,newFileName){
        var folder=parentFolderPath+"/"+newFileName;
        var id=toSafeId(folder);
        var item="<li id='file-"+id+"' class='filemanager-item filemanager-file' data-collapsed='true' data-folder='"+folder+"'><span class='filemanager-item file-context-menu'>"+newFileName+"</span></li>"
	return  item;
    }
    
    function selectElement(selectedItem){
        var itemSelected=$(".filemanager-item.active");
        if (itemSelected){
            itemSelected.removeClass("active");
        }
        selectedItem.addClass("active");
    }
    
    function clearSelection(){
        var itemSelected=$(".filemanager-item.active");
        if (itemSelected){
            itemSelected.removeClass("active");
        }
        selectedItem=null;
    }
    
    function showFileOpDialog(title, folder, file, okCallback,cancelCallback){
        
        var htmlData="";
        if (folder && file){
            htmlData='<label>Folder</label>&nbsp<label>'+folder+'</label></br><label>Name&nbsp&nbsp&nbsp&nbsp&nbsp<input type="text" name="fname" value="" style="width:85%"></label><br/>';
        }else{
            htmlData='Name&nbsp&nbsp&nbsp&nbsp&nbsp<input type="text" name="fname" value="" style="width:85%"></label><br/>';
        }
        
        var dialog = {
            state0: {
        		title: title,
        		html: htmlData,
        		buttons: { "Ok": 1,"Cancel":2 },
        		//focus: "input[name='fname']",
        		submit:function(e,v,m,f){ 
        			$.prompt.close();
        			if (v==1){
            			if (okCallback) {
                			var target=f.fname;
                			okCallback(target);
            			}
        			}
        			else if(v==2){
        			    if (cancelCallback) {
                			cancelCallback();
            			}
        			}
        			e.preventDefault();
        		}
            }
	    }
	    
	    $.prompt(dialog);
    }
    
    function showConfirmationDialog(title, caption, okCallback,cancelCallback){
        
        var dialog ={
            state0: {
        		title: title,
        		html:'<label>'+caption+'</label>',
        		buttons: { "Ok": 1,"Cancel":2 },
        		//focus: "input[name='fname']",
        		submit:function(e,v,m,f){ 
        			$.prompt.close();
        			if (v==1){
            			if (okCallback) {
                			var target=f.fname;
                			okCallback(target);
            			}
        			}
        			else if(v==2){
        			    if (cancelCallback) {
                			cancelCallback();
            			}
        			}
        			e.preventDefault();
        		}
            }
	    }
	    
	    $.prompt(dialog);
    }
	
    function toSafeId(id) {
		
		return id.replace(/\//g,"_");
		
    }
}

